import static org.junit.Assert.*;
import org.junit.*;
import java.lang.reflect.*;
import java.util.Random;
import java.util.Arrays;
import org.junit.runners.MethodSorters;
import org.junit.rules.*;
import org.junit.runner.Description;
import java.util.concurrent.TimeUnit;

/**
 * Contains the unit tests for various Shell sorts within ShellSorts class
 * 
 * @author Zeph Nord
 * @version Lab11
 * @version CPE103-03
 * @version Winter 2017
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ShellSortsTests

{
	/**
	 * JUnit tests for Quadratic sorts lab assignment.
	 *
	 * @author Paul Hatalsky
	 * @version 2/18/2016 Developed for CPE 103 Lab 10
	 */
	@Test
	public void test01_shell_sort() {
		Integer[] array = new Integer[] { 10, 5 };
		ShellSorts.shell(array);
		assertEquals(array[0], new Integer(5));
		assertEquals(array[1], new Integer(10));
	}

	@Test
	public void test02_hibbard_sort() {
		String[] array = new String[] { "World", "Hello" };
		ShellSorts.hibbard(array);
		assertEquals(array[0], "Hello");
		assertEquals(array[1], "World");
	}

	@Test
	public void test03_sedgewick_sort() {
		Integer[] array = new Integer[] { 10, 5 };
		ShellSorts.sedgewick(array);
		assertEquals(array[0], new Integer(5));
		assertEquals(array[1], new Integer(10));
	}

	@Test
	public void test04_heapSort_sort() {
		Integer[] array = new Integer[] { 10, 5 };
		ShellSorts.heapSort(array);
		assertEquals(array[0], new Integer(5));
		assertEquals(array[1], new Integer(10));
	}
	/*
	 * End sample tests developed by Paul Hatalsky
	 */

	/*
	 * Set up a large random arrays for testing
	 */
	private static Integer seed = 20000;
	private static Random random = new Random(seed);

	public static void createRandomArrays(String[] args) {
		/*
		 * Testing for lengths of 2.5k, 5k, 10k, 20k, 500k, 1000k, 2000k
		 */
		Integer[] array2500 = new Integer[2500];
		for (int i = 0; i < 2500; i++) {
			array2500[i] = random.nextInt(100000);
		}
		Integer[] array5000 = new Integer[5000];
		for (int i = 0; i < 5000; i++) {
			array5000[i] = random.nextInt(100000);
		}
		Integer[] array10000 = new Integer[10000];
		for (int i = 0; i < 10000; i++) {
			array10000[i] = random.nextInt(100000);
		}
		Integer[] array20000 = new Integer[20000];
		for (int i = 0; i < 20000 ; i++) {
			array20000 [i] = random.nextInt(100000);
		}
		Integer[] array500000 = new Integer[500000];
		for (int i = 0; i < 500000; i++) {
			array500000[i] = random.nextInt(100000);
		}
		Integer[] array500000 = new Integer[500000];
		for (int i = 0; i < 500000; i++) {
			array500000[i] = random.nextInt(500000);
		}
	}

	@Test
	public void test05_shell_sort_advanced() {

	}
}
