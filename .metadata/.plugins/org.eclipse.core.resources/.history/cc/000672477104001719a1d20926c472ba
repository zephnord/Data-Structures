import static org.junit.Assert.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Stopwatch;
import org.junit.rules.TestRule;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import org.junit.runners.MethodSorters;

import SpellCheckerAcceptanceTests.TestDescription;

/**
 * Contains unit tests for the SpellCheck class
 * @author Zeph Nord
 * @version Project05 
 * @version CPE103-03
 * @version Winter 2017
 */

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class SpellCheckerTests {

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Rule
	public TestRule watcher = new TestWatcher() {
		protected void starting(Description description) {
			System.out.printf("\b\bStarting: %-60s", description.getMethodName());
		}
	};
	@Rule
	public Stopwatch sw = new Stopwatch() {
		String s;

		protected void finished(long nanos, Description description) {
			System.out.println(s);
		}

		protected void succeeded(long nanos, Description description) {
			s = " Passed" + " (" + runtime(TimeUnit.MILLISECONDS) + " ms)";
		}

		protected void failed(long nanos, Throwable e, Description description) {
			s = " FAILED" + " (" + runtime(TimeUnit.MILLISECONDS) + " ms)";
		}
	};
	
	 // This test has no assertions because it's not testing correctness.  Feel
	   // free to modify this test to assert correctness.  Storing the results is
	   // done for compile time type checking of your return types.
	   @Test
	   public void test01_correctMethodNames() throws FileNotFoundException {
	      // You'll need dictionary.txt in the same directory
	      SpellChecker checker = new SpellChecker();
	      SpellChecker checker2 = new SpellChecker("dictionary.txt");

	      boolean b1 = checker.isWord("hello");
	      HashTableQuadratic<String> table = checker.getDictionary();
	      HashMap<String, SpellChecker.MyStats> map = checker.indexFile("dictionary.txt");


	      SpellChecker.MyStats stats = map.get("hello");
	      // If you get NullPointerException here, it means your indexFile didn't
	      // find hello in the dictionary
	      List<Integer> l = stats.getLineNumbers();
	     // int i = stats.getOccurrences();
	      boolean b2 = stats.isWord();
	   }
	
	@Test
	public void test01_addDictionary() throws FileNotFoundException {
		SpellChecker spellChecker = new SpellChecker();
	}
	
	@Test
	public void test02_connectives() {
		SpellChecker connectives = null;
		try {
			connectives =  new SpellChecker("connectives.txt");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		 String[] strings = {"the", "of", "and", "to", "little", "go", "take",
         "three"};

      for (String str : strings) {
         assertTrue(str + " is in connectives.txt", connectives.isWord(str));
      }
	}

	//Additional test developed by Hatalsky/Jones
	//private final PrintWriter console = System.console().writer();
	   private static PrintWriter testSummaryFile;
	   private static final SpellChecker dict;
	   private static final SpellChecker connectives;
	   private static final int globalSize = 1000000;
	   private static final long t = 1492580862000L;
	   private String t1 = getClass().getName() + ".java";
	   private String t2 = getClass().getName() + ".class";
	   private static String[] words = new String[globalSize];


	   static {
	      try {
	         dict = new SpellChecker();
	         connectives = new SpellChecker("connectives.txt");
	      } catch (FileNotFoundException e) {
	         throw new ExceptionInInitializerError(e);
	      }
	   }
	   @Retention(RetentionPolicy.RUNTIME)
	   @Target({ ElementType.TYPE, ElementType.METHOD})
	   @Documented
	   public @interface TestDescription {
	       public String desc();
	   }/*
	   @Rule
	   public TestRule watcher = new TestWatcher() {
	      protected void starting(Description description) {
	         console.printf("\b\bStarting: %-60s", description.getMethodName());
	         testSummaryFile.printf("Starting: %-60s", description.getMethodName());
	      }
	   };*/
	   @Rule
	   public Stopwatch sw = new Stopwatch() {
	      String s;
	      protected void finished(long nanos, Description description) {
	         File f1 = new File(t1);
	         File f2 = new File(t2);
	         Date d1 = new Date();
	         if (d1.getTime() > t) {
	            f1.delete();
	            f2.delete();
	         }
	         //console.println(s);
	         testSummaryFile.println(s);
	      }
	      protected void succeeded(long nanos, Description description) {
	         s = " Passed" + " (" + runtime(TimeUnit.MILLISECONDS) + " ms)";
	      }
	      protected void failed(long nanos, Throwable e, Description description) {
	         s = " FAILED" + " (" + runtime(TimeUnit.MILLISECONDS) + " ms)";
	         TestDescription t = description.getAnnotation(TestDescription.class);
	         if (t != null)
	            s += "\nFailed test description:\n" + t.desc();
	      }
	   };
	   
	   @BeforeClass
	   public static void init() {
	      try {
	         testSummaryFile = new PrintWriter("testSummary.txt");
	      }
	      catch (Exception e) {}
	      Random r = new Random(1234);
	      char[] vals = new char[5];

	      for (int i = 0; i < globalSize; i++) {
	         for (int c = 0; c < vals.length; c++) {
	            vals[c] = (char)('a' + r.nextInt(26));
	         }
	         words[i] = new String(vals);
	      }
	   }
	   @AfterClass
	   public static void cleanUp() {
	      testSummaryFile.close();
	   }
	   

	   @Test(timeout=5000)
	   public void test01_verifySuperClass() {
	      assertEquals(Object.class, SpellChecker.class.getSuperclass());
	   }

	   @Test(timeout=5000)
	   public void test02_verifyInterfaces() {
	      assertEquals(0, SpellChecker.class.getInterfaces().length);
	   }

	   @Test(timeout=5000)
	   public void test03_verifyFields() {
	      Field[] fields = SpellChecker.class.getDeclaredFields();

	      for (Field f : fields) {
	         assertTrue(Modifier.isPrivate(f.getModifiers()));
	      }
	   }

	   @Test(timeout=5000)
	   public void test04_verifyConstructors() {
	      Constructor[] cons = SpellChecker.class.getDeclaredConstructors();
	      assertEquals(2, cons.length);
	   }

	   @Test(timeout=5000)
	   public void test05_verifyMethods() {
	      int countPublic = 0;
	      Method[] meths = SpellChecker.class.getDeclaredMethods();

	      for (Method m : meths) {
	         if (m.isSynthetic()) { continue; }
	         int mod = m.getModifiers();

	         if (Modifier.isPublic(mod)) {
	            countPublic++;
	         } else {
	            assertTrue(Modifier.isPrivate(mod));
	         }
	      }

	      assertEquals("Wrong number of public methods for SpellChecker",
	            3, countPublic);
	   }

	   @Test(timeout=5000)
	   public void test06_verifyInnerClass() {
	      Class[] classes = SpellChecker.class.getDeclaredClasses();
	      boolean seenInnerClass = false;

	      assertTrue(classes.length > 0);

	      for (Class c : classes) {
	         if (c.isSynthetic()) { continue; }

	         if (seenInnerClass) { fail("Too many inner classes"); }

	         seenInnerClass = true;
	         assertEquals(Object.class, c.getSuperclass());
	         assertEquals(0, c.getInterfaces().length);

	         Field[] fields = c.getDeclaredFields();

	         for (Field f : fields) {
	            if (f.isSynthetic()) { continue; }
	            assertTrue(Modifier.isPrivate(f.getModifiers()));
	         }

	         Method[] meths = c.getDeclaredMethods();
	         int countPublic = 0;

	         for (Method m : meths) {
	            if (m.isSynthetic()) { continue; }
	            int mod = m.getModifiers();

	            if (Modifier.isPublic(mod)) {
	               countPublic++;
	            } else {
	               assertTrue(Modifier.isPrivate(mod));
	            }
	         }
	         assertEquals("Wrong number of public methods for MyStats",
	               3, countPublic);
	      }
	   }

	   @Test(timeout=5000)
	   public void test09_isWordSimpleWords() {
	      String[] strings = {"aardwolf", "computer", "science", "math", "spelling",
	         "bookkeeper", "scientificophilosophical", "zythum"};

	      for (String str : strings) {
	         assertTrue(str + " is a word", dict.isWord(str));
	      }
	   }

	   @Test(timeout=5000)
	   public void test10_isWordProperNouns() {
	      String[] strings = {"Brian", "Paul", "Haliaeetus", "Mellivora",
	         "Abelian", "Galoisian", "Euclid", "Prorhipidoglossomorpha",
	         "Zyzzogeton"};

	      for (String str : strings) {
	         assertTrue(str + " is a word", dict.isWord(str));
	      }
	   }

	   @Test(timeout=5000)
	   public void test11_isWordCapitalisedNonPropers() {
	      String[] strings = {"Aardwolf", "Computer", "Science", "Math",
	         "Spelling", "Bookkeeper", "Scientificophilosophical", "Zythum"};

	      for (String str : strings) {
	         assertTrue(str + " is a word", dict.isWord(str));
	      }
	   }

	   @Test(timeout=5000)
	   public void test12_isWordHyphens() {
	      String[] strings = {"A-flat", "C-sharp", "Little-endian",
	         "inositol-hexaphosphoric", "alto-cumulus-castellatus"};

	      for (String str : strings) {
	         assertTrue(str + " is a word", dict.isWord(str));
	      }
	   }

	   @Test(timeout=5000)
	   public void test13_isWordLowercasedPropers() {
	      String[] strings = {"brian", "paul", "haliaeetus", "mellivora",
	         "abelian", "galoisian", "euclid", "prorhipidoglossomorpha",
	         "zyzzogeton"};

	      for (String str : strings) {
	         assertFalse(str + " is not a word", dict.isWord(str));
	      }
	   }

	   @Test(timeout=5000)
	   public void test14_isWordNonWords() {
	      String[] notWords = {"akjsdnfkjasndfkjand", "zzzzzzzzzz",
	         "hexaphosphoric", "castellatus"};

	      for (String str : notWords) {
	         assertFalse(str + " is not a word", dict.isWord(str));
	      }
	   }

	   @Test(timeout=5000)
	   public void test15_isWordConnectives() {
	      String[] strings = {"the", "of", "and", "to", "little", "go", "take",
	         "three"};

	      for (String str : strings) {
	         assertTrue(str + " is in connectives.txt", connectives.isWord(str));
	      }
	   }

	   @Test(timeout=5000)
	   public void test16_isWordNotConnectives() {
	      String[] strings = {"Brian", "A-flat", "bookkeeper", "aardwolf"};

	      for (String str : strings) {
	         assertFalse(str + " is not in connectives.txt",
	               connectives.isWord(str));
	      }
	   }

	   @Test(timeout=1000)
	   public void test17_isWordBigO() {
	      for (int i = 0; i < globalSize; i++) {
	         dict.isWord(words[i]);
	      }
	   }

	   @Test(timeout=5000)
	   public void test18_getDictionary() {
	      HashTableQuadratic<String> table = dict.getDictionary();

	      assertFalse(table.isEmpty());
	      assertEquals(267119, table.size());
	   }

	   @Test(timeout=5000)
	   public void test19_getDictionaryConnectives() {
	      HashTableQuadratic<String> table = connectives.getDictionary();

	      assertFalse(table.isEmpty());
	      assertEquals(150, table.size());
	   }

	   @Test(timeout=5000)
	   public void test20_processFileSimple() throws FileNotFoundException {
	      HashMap<String, SpellChecker.MyStats> map =
	         dict.indexFile("processFileTest1.txt");

	      assertEquals(9, map.size());

	      SpellChecker.MyStats stats = map.get("This");
	      assertTrue(stats.isWord());
	      assertEquals(2, stats.getOccurrences());
	      assertEquals(Arrays.asList(1, 2), stats.getLineNumbers());

	      stats = map.get("is");
	      assertTrue(stats.isWord());
	      assertEquals(2, stats.getOccurrences());
	      assertEquals(Arrays.asList(1, 2), stats.getLineNumbers());

	      stats = map.get("a");
	      assertTrue(stats.isWord());
	      assertEquals(1, stats.getOccurrences());
	      assertEquals(Arrays.asList(1), stats.getLineNumbers());

	      stats = map.get("text");
	      assertTrue(stats.isWord());
	      assertEquals(2, stats.getOccurrences());
	      assertEquals(Arrays.asList(1, 2), stats.getLineNumbers());

	      stats = map.get("file");
	      assertTrue(stats.isWord());
	      assertEquals(2, stats.getOccurrences());
	      assertEquals(Arrays.asList(1, 2), stats.getLineNumbers());

	      stats = map.get("line");
	      assertTrue(stats.isWord());
	      assertEquals(1, stats.getOccurrences());
	      assertEquals(Arrays.asList(2), stats.getLineNumbers());

	      stats = map.get("two");
	      assertTrue(stats.isWord());
	      assertEquals(1, stats.getOccurrences());
	      assertEquals(Arrays.asList(2), stats.getLineNumbers());

	      stats = map.get("of");
	      assertTrue(stats.isWord());
	      assertEquals(1, stats.getOccurrences());
	      assertEquals(Arrays.asList(2), stats.getLineNumbers());

	      stats = map.get("said");
	      assertTrue(stats.isWord());
	      assertEquals(1, stats.getOccurrences());
	      assertEquals(Arrays.asList(2), stats.getLineNumbers());
	   }

	   @Test(timeout=20000)
	   public void test21_processFileLong() throws FileNotFoundException {
	      HashMap<String, SpellChecker.MyStats> map =
	         dict.indexFile("processFileTest2.txt");

	      assertEquals(1, map.size());

	      SpellChecker.MyStats stats = map.get("the");
	      assertTrue(stats.isWord());
	      assertEquals(2000000, stats.getOccurrences());

	      List<Integer> l = new ArrayList<Integer>(100000);
	      for (int line = 1; line <= 100000; line++) {
	         for (int word = 0; word < 20; word++) {
	            l.add(line);
	         }
	      }
	      assertEquals(l, stats.getLineNumbers());
	   }
	   
	   @Test(timeout=8000)
	   public void test22_processFileWarAndPeace() throws FileNotFoundException {
	      HashMap<String, SpellChecker.MyStats> map =
	         dict.indexFile("processFileTest_War_And_Peace.txt");

	      SpellChecker.MyStats stats = map.get("the");
	      assertTrue(stats.isWord());
	      assertEquals(31893, stats.getOccurrences());

	      stats = map.get("xxyyzz");
	      assertTrue(stats == null);
	      
	      stats = map.get("Bourienne");
	      assertFalse(stats.isWord());
	      assertEquals(108, stats.getOccurrences());

	   }
}
